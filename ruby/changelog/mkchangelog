#!/usr/bin/env ruby
# encoding: UTF-8
$stdout.sync = $stderr.sync = true

require 'logger'

class Changelog

  VERSION = '0.2.0'

  def initialize
    # Setup logger
    @logger = Logger.new($stdout)
    @logger.formatter = proc do |severity, datetime, progname, msg|
      '[%1$s] %2$s :: %3$s%4$s' % [severity, datetime, msg, "\n"]
    end

    # Config values
    # TO-DO: Read values from file
    @config = {
      :format => {
        :title => '## Changelog',
        :heading => '%3$s### %1$s%2$s',
        :item => '* [%h] %s - *%aN*'
      },
      :file => 'CHANGELOG.md'
    }
  end

  def generate
    begin
      # Write file
      write

      # Check if file was created
      if File.exist?(@config[:file])
        @logger.info('File %s created successfully' % @config[:file])
      end
    rescue => ex
      @logger.error(ex.message)
    end
  end

  private
  def get_base_url
    url = `git remote get-url --push origin`
    url.chomp!.chomp!('.git')
  end

  def get_tags
    tags = `git for-each-ref --sort=taggerdate --format='%(refname:strip=2)|%(taggerdate:short)' refs/tags`
    tags = tags.split(/\n/).sort_by! do |ver|
      v = ver.split('|')
      Gem::Version.new(v.first.gsub(/^v/, ''))
    end
    tags.reverse!
    data = []

    tags.each do |tag|
      t = tag.split('|')
      data.push({
        :tag => t.first,
        # Fix for lightweight tags
        :date => (t.last == t.first) ? nil : t.last
      })
    end

    data
  end

  def get_git_log(*refs)
    refs[0] ||= nil # First commit
    refs[1] ||= nil # Second commit
    commits = '' # Helper

    if !refs[0].nil? and !refs[1].nil?
      # Compare tags
      commits = '%1$s..%2$s' % [refs[0], refs[1]]
    elsif !refs[0].nil? and refs[1].nil?
      # Get tag commits
      commits = refs[0]
    else
      # None of above
      raise 'You need to provide at least one commit'
    end

    # Return output of the command
    `git log --format='#{@config[:format][:item]}' #{commits}`
  end

  def write
    # Check if it's a git repository
    if !Dir.exist?('.git')
      raise 'Not a git repository'
    end

    tags = get_tags

    # Create file in current directory
    File.open(@config[:file], 'w') do |md|

      # Title
      md.puts @config[:format][:title]

      # Iterate each tag
      tags.each_with_index do |data, index|
        nextref = (index <= 0) ? {:tag => 'master', :date => nil} : tags[index - 1]

        # Git log
        log = get_git_log(data[:tag], nextref[:tag])

        # Only write to file if tag has commits to show
        if !log.empty?
          # Write tag and date
          md.puts @config[:format][:heading] % [
            nextref[:tag],
            (nextref[:date].nil? ? '' : " - #{nextref[:date]}"),
            "\n"
          ]

          # Write tag commits
          md.puts log

          # Print first tag
          if index == (tags.length - 1)
            # Tag and date
            md.puts @config[:format][:heading] % [
              tags.last[:tag],
              (tags.last[:date].nil? ? '' : " - #{tags.last[:date]}"),
              "\n"
            ]

            # Tag commits
            md.puts get_git_log(tags.last[:tag])
          end

        end

      end

    end

  end

end

# Generate changelog
Changelog.new.generate
