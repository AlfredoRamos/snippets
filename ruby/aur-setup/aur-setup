#!/usr/bin/env ruby
# encoding: UTF-8

$stdout.sync = $stderr.sync = true

require 'iniparse'
require 'logger'

##
# AUR setup utility
#
class AurSetUp
  VERSION = '0.4.1'.freeze

  def initialize
    # Setup logger
    @logger = Logger.new($stdout)
    @logger.datetime_format = '%F %T %:z'
    @logger.formatter = proc do |severity, datetime, progname, msg|
      "#{datetime} | #{severity} | #{msg}\n"
    end

    # Configuration file
    file = File.absolute_path(File.join(Dir.home, '.config', 'aur-setup.conf'))

    # Create an empty configuration file if it doesn't exist
    unless File.exist?(file)
      @logger.warn('Configuration file does not exist')

      File.open(file, 'w') do |f|
        # Create configuration file structure
        config = IniParse.gen do |conf|
          conf.section('aur') do |aur|
            aur.option('root_path', '')
            aur.option('hooks_path', '')
          end

          conf.section('git') do |git|
            git.option('name', '')
            git.option('email', '')
          end
        end

        # Save to file
        f.puts config.to_ini
      end

      @logger.info(format('Config file created at %s', file))
    end

    # Load settings from file
    begin
      @config = IniParse.open(file)
    rescue => error
      @logger.error(error.message)
    end

    # Check for errors
    case
    when (@config['aur']['root_path'].to_s.empty? || @config['aur']['hooks_path'].to_s.empty?)
      @logger.error('You need to set the AUR root and hooks path')
    when (@config['git']['name'].to_s.empty? || @config['git']['email'].to_s.empty?)
      @logger.error('You need to set the git user name and email')
    end
  end

  def run
    args = parse_arguments

    if args.empty?
      # Add git configuration and hooks
      setup_aur_packages
    elsif args.key?('version')
      # Show version
      version
    else
      unless args.keys.empty?
        @logger.warn(format('Unknown arguments: %s', args.keys.join(',')))
      end
    end
  end

  def parse_arguments
    return ARGV.join(' ').scan(/--?([^=\s]+)(?:=(\S+))?/).to_h
  end

  def git_repositories
    repositories = Dir.entries(File.expand_path(@config['aur']['root_path']))
    repositories -= ['.', '..']

    repositories.map! do |repository|
      # Get absolute path
      File.absolute_path(File.join(
        File.expand_path(@config['aur']['root_path']),
        repository
      ))
    end

    repositories
  end

  def git_hooks
    hooks = Dir.entries(File.expand_path(@config['aur']['hooks_path']))
    hooks -= ['.', '..']

    # Do not include files that are not hooks
    hooks.delete_if do |hook|
      !hook.include?('.hook') || !File.file?(File.join(
        File.expand_path(@config['aur']['hooks_path']),
        hook
      ))
    end

    hooks
  end

  def version
    puts format('%1$s %2$s', File.basename(__FILE__), VERSION)
    exit
  end

  def setup_aur_packages
    git_repositories.each do |package|
      setup_git_config(package)
      setup_git_hooks(package)
    end
  end

  def setup_git_config(package)
    if Dir.exist?(package)
      # Change to package directory
      Dir.chdir(package)

      cmd = 'git config --local --replace-all user.%1$s "%2$s"'

      # Git config
      system(format(cmd, 'name', @config['git']['name']))
      system(format(cmd, 'email', @config['git']['email']))

      @logger.info(format('%s git configuration [OK]', File.basename(package)))
    end

    # Return to the AUR root path
    Dir.chdir(File.expand_path(@config['aur']['root_path']))
  end

  def setup_git_hooks(package)
    git_hooks.each do |hook|
      file = File.join(File.expand_path(@config['aur']['hooks_path']), hook)
      target = File.join(package, '.git', 'hooks', hook).chomp('.hook')

      # Create symbolic link
      File.symlink(file, target) if File.exist?(file) && !File.symlink?(target)
    end

    # Get installed hooks
    hooks = Dir.entries(File.join(package, '.git', 'hooks'))
    hooks -= ['.', '..']

    # Do not include sample hooks
    hooks.delete_if do |hook|
      hook.include?('.sample')
    end

    @logger.info(format(
      '%1$s git hooks [%2$s]',
      File.basename(package),
      (hooks.empty? ? 'FAIL' : 'OK')
    ))
  end
end

# Run application
AurSetUp.new.run
