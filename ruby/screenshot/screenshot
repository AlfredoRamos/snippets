#!/usr/bin/env ruby
# encoding: UTF-8
$stdout.sync = $stderr.sync = true

require 'fileutils'
require 'parseconfig'

class Screenshot
  VERSION = '0.4.1'

  def initialize
    load_settings
  end

  def run
    args = parse_arguments

    if args.key?('version')
      # Show version
      version
    elsif args.key?('help')
      # Show help
      help
    else
      # Take screenshot
      take
    end

  end

  def version
    puts '%1$s %2$s' % [File.basename(__FILE__), VERSION]
    exit
  end

  def help
    copyright
    puts
    puts 'Usage: %s [<options>]' % File.basename(__FILE__)
    puts
    puts 'Options:'
    puts '  --type=<full|region>'
    puts '    Screenshot type. If this option is not set or has an invalid value,'
    puts '    it will be set to full.'
    puts
    puts '  --path=<path>'
    puts '    Path where screenshot will be saved.'
    puts
    puts '  --delay=<seconds>'
    puts '    Time in seconds to wait before taking the screenshot.'
    puts
    puts '  --version'
    puts '    Display the version of this script'
    puts
    puts '  --help'
    puts '    Display this information.'
    exit
  end

  def take
    parse_arguments

    # Screenshot filename
    image = File.absolute_path(File.join(
      File.expand_path(@config['screenshot']['path']),
      '%1$s.%2$s' % [
        Time.now.strftime(@config['screenshot']['name']),
        @config['screenshot']['extension']
      ]
    ))

    # Screenshot path
    begin
      unless Dir.exist?(File.dirname(image))
        FileUtils.mkpath(File.dirname(image))
      end
    rescue => error
      abort error.message
    end

    # Screenshot delay
    if @config['screenshot']['delay'].to_i > 0 and @config['screenshot']['type'] == 'full'
      sleep(@config['screenshot']['delay'].to_i)
    end

    # Screenshot arguments
    args = @config['screenshot']['arguments'] % case @config['screenshot']['type']
    when 'region'
      image
    else
      '%1$s %2$s' % ['-window root', image]
    end

    # Save screenshot
    begin
      system('%1$s %2$s' % [@config['screenshot']['application'], args])
    rescue => error
      abort error.message
    end

    # Debug info
    puts 'Path:   %s' % File.dirname(image)
    puts 'File:   %s' % File.basename(image)
    puts 'Type:   %s' % @config['screenshot']['type']
    puts 'Delay:  %ds' % @config['screenshot']['delay'].to_i
    puts 'Status: %s' % (File.exist?(image) ? 'saved' : 'failed')
  end

  private
  def load_settings
    file = File.absolute_path(File.join(Dir.home, '.config', 'screenshot.conf'))

    begin
      # Create config file
      unless File.exist?(file)
        File.open(file, 'w') do |f|
          f.puts '[screenshot]'
          f.puts 'application="/usr/bin/gm"'
          f.puts 'arguments="import %1$s"'
          f.puts 'path="~/Pictures/Screenshots"'
          f.puts 'name="screenshot_%Y%m%d_%H%M%S"'
          f.puts 'extension="png"'
          f.puts 'type="full"'
          f.puts 'delay=0'
        end
      end

      # Load config file
      @config = ParseConfig.new(file)
    rescue => error
      abort error.message
    end

  end

  def parse_arguments
    args = ARGV.join(' ').scan(/--?([^=\s]+)(?:=(\S+))?/).to_h

    @config['screenshot']['type'] = args['type'] if !args['type'].nil?
    @config['screenshot']['path'] = File.expand_path(args['path']) if !args['path'].nil?
    @config['screenshot']['delay'] = args['delay'].to_i if !args['delay'].nil?

    return args
  end

  def copyright
    puts '%1$s %2$s - A simple screenshot tool' % [File.basename(__FILE__), VERSION]
    puts
    puts 'Copyright (C) 2015 Alfredo Ramos'
    puts
    puts 'This is free software; see the source for copying conditions. There is NO'
    puts 'WARRANTY; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.'
    puts 'See the GNU General Public License version 3 for more details.'
  end

end

Screenshot.new.run
