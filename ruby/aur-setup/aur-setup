#!/usr/bin/env ruby

$stdout.sync = $stderr.sync = true

require 'iniparse'
require 'logger'
require 'pathname'
require 'fileutils'

##
# AUR setup utility
#
class AurSetUp
  VERSION = '0.5.0'.freeze

  def initialize
    # Setup logger
    @logger = Logger.new($stdout)
    @logger.datetime_format = '%F %T %:z'
    @logger.formatter = proc do |severity, datetime, _progname, msg|
      "#{datetime} | #{severity} | #{msg}\n"
    end

    # Configuration file
    file = File.absolute_path(File.join(Dir.home, '.config', 'aur-setup.conf'))

    # Create an empty configuration file if it doesn't exist
    unless File.exist?(file)
      @logger.warn('Configuration file does not exist')

      File.open(file, 'w') do |f|
        # Create configuration file structure
        config = IniParse.gen do |conf|
          conf.section('aur') do |aur|
            aur.option('root_path', '')
            aur.option('hooks_path', '')
          end

          conf.section('git') do |git|
            git.option('name', '')
            git.option('email', '')
          end
        end

        # Save to file
        f.puts config.to_ini
      end

      @logger.info(format('Config file created at %<filename>s', filename: file))
    end

    # Load settings from file
    begin
      @config = IniParse.open(file)
    rescue IniParse::IniParseError => error
      @logger.error(error.message)
    end

    if @config['aur']['root_path'].to_s.empty? || @config['aur']['hooks_path'].to_s.empty?
      @logger.error('You need to set the AUR root and hooks path')
    end

    if @config['git']['name'].to_s.empty? || @config['git']['email'].to_s.empty?
      @logger.error('You need to set the git user name and email')
    end
  end

  def run
    args = parse_arguments

    if args.empty?
      # Add git configuration and hooks
      setup_aur_packages
    elsif args.key?('version')
      # Show version
      version
    else
      unless args.keys.empty?
        @logger.warn(format('Unknown arguments: %<args>s', args: args.keys.join(',')))
      end
    end
  end

  def parse_arguments
    ARGV.join(' ').scan(/--?([^=\s]+)(?:=(\S+))?/).to_h
  end

  def git_repositories
    Pathname.new(File.expand_path(@config['aur']['root_path'])).children
  end

  def git_hooks
    hooks = Pathname.new(File.expand_path(@config['aur']['hooks_path'])).children
    hooks.keep_if { |hook| hook.extname.eql?('.hook') && hook.executable? }
  end

  def version
    puts format(
      '%<program>s %<version>s',
      program: File.basename(__FILE__),
      version: VERSION
    )
    exit
  end

  def setup_aur_packages
    git_repositories.each do |package|
      setup_git_config(package)
      setup_git_hooks(package)
    end
  end

  def setup_git_config(package)
    if Dir.exist?(package.to_s)
      # Change to package directory
      Dir.chdir(package.to_s)

      cmd = 'git config --local --replace-all user.%<key>s "%<value>s"'

      # Git config
      system(format(cmd, key: 'name', value: @config['git']['name']))
      system(format(cmd, key: 'email', value: @config['git']['email']))

      @logger.info(format(
        '%<package>s git configuration [OK]',
        package: package.basename
      ))
    end

    # Return to the AUR root path
    Dir.chdir(File.expand_path(@config['aur']['root_path']))
  end

  def setup_git_hooks(package)
    git_hooks.each do |hook|
      target = Pathname.new(File.join(package.to_s, '.git', 'hooks', hook.basename))
      target = target.to_s.chomp(target.extname) unless target.extname.empty?

      # Create symbolic link
      FileUtils.symlink(hook.to_s, target.to_s, force: true)
    end

    # Get installed hooks
    hooks = Pathname.new(File.join(package.to_s, '.git', 'hooks')).children
    hooks.delete_if { |hook| hook.extname.eql?('.sample') }

    @logger.info(format(
      '%<package>s git hooks [%<status>s]',
      package: File.basename(package.to_s),
      status: (hooks.empty? ? 'FAIL' : 'OK')
    ))
  end
end

# Run application
AurSetUp.new.run
