#!/usr/bin/env ruby
# encoding: UTF-8
$stdout.sync = $stderr.sync = true

require 'logger'

class Changelog

  VERSION = '0.3.0'

  def initialize
    # Setup logger
    @logger = Logger.new($stdout)
    @logger.formatter = proc do |severity, datetime, progname, msg|
      "[#{severity}] #{datetime} | #{msg}\n"
    end
  end

  def generate(args = {})
    # Check if it's a git repository
    unless Dir.exist?('.git')
      @logger.fatal('Not a git repository')
      abort
    end

    # Default values
    defaults = {
      :title => '## Changelog',
      :heading => "\n### %1$s%2$s",
      :item => '* [%1$s] %2$s - *%3$s*',
      :file => 'CHANGELOG.md'
    }

    # Merge default values
    args = defaults.merge(args)

    # Tag list
    tags = get_tags

    # Git log
    commits = []

    # Create file in current directory
    File.open(args[:file], 'w') do |md|
      # Title
      md.puts args[:title]

      # Write master branch commits if there's no tags
      unless tags.length > 0
        # Branch
        md.puts args[:heading] % [
          'master',
          nil
        ]

        # Commits
        get_commits({
          :ref1 => 'master'
        }).each do |commit|
          md.puts args[:item] % [
            commit[:hash],
            commit[:message],
            commit[:author]
          ]
        end
      end

      # Write each tag and its commits
      tags.each_index do |index|
        nextref = (index <= 0) ? {:tag => 'master', :date => nil} : tags[index - 1]

        # Tag and date
        md.puts args[:heading] % [
          nextref[:tag],
          (nextref[:date].nil? ? '' : " - #{nextref[:date]}"),
        ]

        # Commits
        get_commits({
          :ref1 => tags[index][:tag],
          :ref2 => nextref[:tag]
        }).each do |commit|
          md.puts args[:item] % [
            commit[:hash],
            commit[:message],
            commit[:author]
          ]
        end

        # Print first tag
        if index == (tags.length - 1)
          # Tag and date
          md.puts args[:heading] % [
            tags[index][:tag],
            (tags[index][:date].nil? ? tags[index][:date] : " - #{tags[index][:date]}"),
          ]

          # Commits
          get_commits({
            :ref1 => tags[index][:tag]
          }).each do |commit|
            md.puts args[:item] % [
              commit[:hash],
              commit[:message],
              commit[:author]
            ]
          end
        end
      end
    end
  end

  def get_tags
    format = '%(refname:strip=2)|%(taggerdate:short)'
    tags = `git for-each-ref --sort=taggerdate --format='#{format}' refs/tags`
    tags = tags.split(/\n/).sort_by! do |ver|
      v = ver.split('|')
      Gem::Version.new(v[0].gsub(/^v/, ''))
    end
    tags.reverse!
    data = []

    tags.each do |tag|
      t = tag.split('|')
      data.push({
        :tag => t[0],
        :date => t[1]
      })
    end

    data
  end

  def get_commits(args = {})
    args[:ref1] ||= nil # First commit
    args[:ref2] ||= nil # Second commit
    format = '%h|%s|%aN' # Hash|Message|Author
    diff = '' # Helper

    if not args[:ref1].nil? and not args[:ref2].nil?
      # Compare tags
      diff = '%1$s..%2$s' % [args[:ref1], args[:ref2]]
    elsif not args[:ref1].nil? and args[:ref2].nil?
      # Get tag commits
      diff = args[:ref1]
    else
      # None of above
      @logger.fatal('You need to provide at least one commit')
      abort
    end

    # Return hash of data
    commits = []
    log = `git log --format='#{format}' #{diff}`
    log = log.split(/\n/)
    log.each do |item|
      i = item.split('|')
      commits.push({
        :hash => i[0],
        :message => i[1],
        :author => i[2]
      })
    end

    # Return commits array
    commits
  end

end

# Generate changelog
Changelog.new.generate
