#!/usr/bin/env ruby
# encoding: UTF-8
$stdout.sync = true

#
# $HOME/.local/bin/aur-setup
# https://github.com/AlfredoRamos/snippets/tree/master/ruby/aur-setup
#

require 'parseconfig'

class AurSetUp
  def initialize
    @@app = {
      :name => File.basename(__FILE__),
      :version => '0.2.1'
    }

    @config = {
      :file => File.absolute_path(File.join(Dir.home, '.config', 'aur-setup.conf'))
    }

    if !Dir.exist?(File.dirname(@config[:file]))
      Dir.mkdir(File.dirname(@config[:file]))
    end

    if !File.exist?(@config[:file])
      File.open(@config[:file], 'w') do |f| 
        data = "[AUR]%3$sroot=%1$s%3$shooks=%2$s%3$s%3$s" % [
          File.absolute_path(File.join(Dir.home, 'Public', 'AUR')),
          File.absolute_path(File.join(File.dirname(__FILE__), 'aur-git-hooks')),
          "\n"
        ]

        data += '[Git]%3$suser=%1$s%3$semail=%2$s%3$s' % ['', '', "\n"]

        f.write(data)
      end
    end

    @config[:data] = ParseConfig.new(@config[:file])

    @config[:repos] = Dir.entries(@config[:data]['AUR']['root'])
    @config[:hooks] = Dir.entries(@config[:data]['AUR']['hooks'])

    # Remove uneeded directories
    @config[:repos].delete('.')
    @config[:repos].delete('..')
    @config[:hooks].delete('.')
    @config[:hooks].delete('..')

    @@colors = {
      :reset    => "\e[0m",
      :bgreen   => "\e[1;32m",
      :bblue    => "\e[1;34m",
      :bwhite   => "\e[1;37m",
      :byellow  => "\e[1;33m",
      :bred     => "\e[1;31m"
    }
  end

  def copyright
    message :msg => '%1$s %2$s' % [@@app[:name], @@app[:version]]
    message
    message :msg => 'AUR set-up script helper'
    message
    message :msg => 'Copyright (c) 2015 Alfredo Ramos'
    message
    message :msg => 'This is free software; see the source for copying conditions. There is NO'
    message :msg => 'WARRANTY; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.'
    message :msg => 'See the GNU General Public License version 3 for more details.'
  end

  def version
    message :msg => '%1$s %2$s' % [@@app[:name], @@app[:version]]
    exit
  end

  def help
    copyright
    message
    message :msg => 'Usage:'
    message :msg => '    %1$s [<options>]' % [@@app[:name]]
    message
    message :msg => 'Options:'
    message :msg => '  --version'
    message :msg => '    Display the version of this script.'
    message
    message :msg => '  --help'
    message :msg => '    Display this information.'
    message
    message :msg => 'Configuration:'
    message :msg => '    User-defined configuration will be loaded from %1$s' % [@config[:file]]
    exit
  end

  def setup_git
    heading :msg => 'Setting up repositories...', :type => 'success'

    if (@config[:data]['Git']['user'].empty? or @config[:data]['Git']['email'].empty?)
      subheading :msg => 'Please set a Git user and email...', :type => 'error'
      subheading :msg => 'Config file located at ', :type => 'info', :newline => 0
      message :msg => @config[:file]
      exit(false)
    end

    if @config[:repos].empty?
      subheading :msg => 'No repositories found...', :type => 'warning'
    end

    # Setup git config
    @config[:repos].each do |repo|
      # Get absolute path of the repository
      path = File.absolute_path(File.join(@config[:data]['AUR']['root'], repo))

      subheading :msg => '%1$s... ' % [repo], :type => 'info', :newline => 0

      if File.directory?(path)
        Dir.chdir(path)

        # Git config
        system('git config --local --replace-all user.name "%1$s"' % [@config[:data]['Git']['user']])
        system('git config --local --replace-all user.email "%1$s"' % [@config[:data]['Git']['email']])

        message :msg => 'done', :type => 'success'
      else
        message :msg => 'fail', :type => 'error'
      end
    end

    Dir.chdir(@config[:data]['AUR']['root']) if Dir.exist?(@config[:data]['AUR']['root'])
  end

  def setup_hooks
    heading :msg => 'Setting up git hooks...', :type => 'success'

    if @config[:repos].empty?
      subheading :msg => 'No repositories found...', :type => 'warning'
    end

    @config[:repos].each do |repo|
      path = File.absolute_path(File.join(@config[:data]['AUR']['root'], repo, '.git', 'hooks'))

      subheading :msg => '%1$s...' % [repo], :type => 'info', :newline => 0

      if Dir.exist?(path)
        Dir.chdir(path)

        @config[:hooks].each do |hook|
          file = File.join(@config[:data]['AUR']['hooks'], hook)
          symlink = File.join(path, hook.chomp('.hook'))

          if File.file?(file) and !File.symlink?(symlink)
            File.symlink(file, symlink)
          end
        end

        message :msg => 'done', :type => 'success'
      else
        message :msg => 'fail', :type => 'error'
      end
    end

    Dir.chdir(@config[:data]['AUR']['root']) if Dir.exist?(@config[:data]['AUR']['root'])
  end

  def init
    args = parse_args

    if args.has_key?('version')
      # Show version
      version
    elsif args.has_key?('help')
      # Show help
      help
    else
      setup_git
      setup_hooks
    end
  end

  private
  def parse_args
    ARGV.join(' ').scan(/--?([^=\s]+)(?:=(\S+))?/).to_h
  end

  def heading(args = {})
    args[:msg] ||= ''
    args[:type] ||= ''
    args[:newline] ||= 1
    color = case args[:type]
            when 'info'
              @@colors[:bblue]
            when 'success'
              @@colors[:bgreen]
            when 'warning'
              @@colors[:byellow]
            when 'error'
              @@colors[:bred]
            else
              @@colors[:reset]
            end

    msg = "#{color}==>#{@@colors[:reset]} #{@@colors[:bwhite]}#{args[:msg]}#{@@colors[:reset]}"

    if args[:newline] === 1
      puts msg
    else
      print msg
    end
  end

  def subheading(args = {})
    args[:msg] ||= ''
    args[:type] ||= ''
    args[:newline] ||= 1
    color = case args[:type]
            when 'info'
              @@colors[:bblue]
            when 'success'
              @@colors[:bgreen]
            when 'warning'
              @@colors[:byellow]
            when 'error'
              @@colors[:bred]
            else
              @@colors[:reset]
            end

    msg = " #{color}->#{@@colors[:reset]} #{@@colors[:bwhite]}#{args[:msg]}#{@@colors[:reset]}"

    if args[:newline] === 1
      puts msg
    else
      print msg
    end
  end

  def message(args = {})
    args[:msg] ||= ''
    args[:type] ||= ''
    args[:newline] ||= 1
    color = case args[:type]
            when 'info'
              @@colors[:bblue]
            when 'success'
              @@colors[:bgreen]
            when 'warning'
              @@colors[:byellow]
            when 'error'
              @@colors[:bred]
            else
              @@colors[:reset]
            end

    msg = "#{color}#{args[:msg]}#{@@colors[:reset]}"

    if args[:newline] === 1
      puts msg
    else
      print msg
    end
  end
end

AurSetUp.new.init
