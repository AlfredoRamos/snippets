#!/usr/bin/env ruby
# encoding: UTF-8
$stdout.sync = true

require 'fileutils'

class Screenshot

  def initialize
    @@app = {
      :name => File.basename(__FILE__),
      :version  => '0.2.0'
    }

    @@config = {
      :bin  => '/usr/bin/gm',
      :args => 'import %1$s',
      :path => File.expand_path('~/Pictures/Screenshots'),
      :name => 'screenshot_%1$s_%2$s.%3$s',
      :ext  => 'png',
      :type => 'full'
    }

    @@colors = {
      :reset    => "\e[0m",
      :bgreen   => "\e[1;32m",
      :bblue    => "\e[1;34m",
      :bwhite   => "\e[1;37m",
      :byellow  => "\e[1;33m",
      :bred     => "\e[1;31m"
    }

  end

  def copyright
    message :msg => '%1$s %2$s' % [@@app[:name], @@app[:version]]
    message
    message :msg => 'A simple screenshot tool'
    message
    message :msg => 'Copyright (c) 2015 Alfredo Ramos'
    message
    message :msg => 'This is free software; see the source for copying conditions. There is NO'
    message :msg => 'WARRANTY; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.'
    message :msg => 'See the GNU General Public License version 3 for more details.'
  end

  def version
    message :msg => '%1$s %2$s' % [@@app[:name], @@app[:version]]
    exit
  end

  def help
    copyright
    message
    message :msg => 'Usage: %1$s [<options>]' % [@@app[:name]]
    message
    message :msg => 'Options:'
    message :msg => '  --type=<full|region>'
    message :msg => '    Screenshot type. If this option is not set or has an invalid value,'
    message :msg => '    it will be set to full.'
    message
    message :msg => '  --path=<path>'
    message :msg => '    Path where screenshot will be saved.'
    message
    message :msg => '  --version'
    message :msg => '    Display the version of this script.'
    message
    message :msg => '  --help'
    message :msg => '    Display this information.'
    exit
  end

  def take()
    parse_args

    heading :msg => 'Taking screenshot', :type => 'success'

    # Check if path exist
    if !Dir.exist?(@@config[:path])
      FileUtils.mkdir_p(@@config[:path])
    end

    date = Time.now
    name = @@config[:name] % [date.strftime('%Y%m%d'), date.strftime('%H%M%S'), @@config[:ext]]
    file = '%1$s%2$s%3$s' % [@@config[:path], File::SEPARATOR, name]
    args = @@config[:args] % case @@config[:type]
    when 'full'
      '%1$s %2$s ' %  ['-window root', file]
    else
      '%1$s' %  [file]
    end

    # Debug info
    subheading :msg => "Path:\t", :type => 'info', :newline => 0
    message :msg => @@config[:path]

    subheading :msg => "File:\t",:type => 'info', :newline => 0
    message :msg => name

    subheading :msg => "Type:\t", :type => 'info', :newline => 0
    message :msg => @@config[:type]

    # Save screenshot
    system('%1$s %2$s' % [@@config[:bin], args])

    # Check if file was saved
    status = File.exist?(file)

    # Print stus
    subheading :msg => "Status:\t", :type => 'info', :newline => 0
    if status
      message :msg => 'saved', :type => 'success'
    else
      message :msg => 'failed', :type => 'error'
    end

    status
  end

  def init
    args = parse_args

    if args.has_key?('version')
      # Show version
      version
    elsif args.has_key?('help')
      # Show help
      help
    else
      # Take screenshot
      take
    end
  end

  private
  def parse_args
    args = ARGV.join(' ').scan(/--?([^=\s]+)(?:=(\S+))?/).to_h 

    @@config[:type] = args['type'] if !args['type'].nil?
    @@config[:path] = File.expand_path(args['path']) if !args['path'].nil?

    args
  end

  def heading(args = {})
    args[:msg] ||= ''
    args[:type] ||= ''
    args[:newline] ||= 1
    color = case args[:type]
            when 'info'
              @@colors[:bblue]
            when 'success'
              @@colors[:bgreen]
            when 'warning'
              @@colors[:byellow]
            when 'error'
              @@colors[:bred]
            else
              @@colors[:reset]
            end

    msg = "#{color}==>#{@@colors[:reset]} #{@@colors[:bwhite]}#{args[:msg]}#{@@colors[:reset]}"

    if args[:newline] === 1
      puts msg
    else
      print msg
    end
  end

  def subheading(args = {})
    args[:msg] ||= ''
    args[:type] ||= ''
    args[:newline] ||= 1
    color = case args[:type]
            when 'info'
              @@colors[:bblue]
            when 'success'
              @@colors[:bgreen]
            when 'warning'
              @@colors[:byellow]
            when 'error'
              @@colors[:bred]
            else
              @@colors[:reset]
            end

    msg = " #{color}->#{@@colors[:reset]} #{@@colors[:bwhite]}#{args[:msg]}#{@@colors[:reset]}"

    if args[:newline] === 1
      puts msg
    else
      print msg
    end
  end

  def message(args = {})
    args[:msg] ||= ''
    args[:type] ||= ''
    args[:newline] ||= 1
    color = case args[:type]
            when 'info'
              @@colors[:bblue]
            when 'success'
              @@colors[:bgreen]
            when 'warning'
              @@colors[:byellow]
            when 'error'
              @@colors[:bred]
            else
              @@colors[:reset]
            end

    msg = "#{color}#{args[:msg]}#{@@colors[:reset]}"

    if args[:newline] === 1
      puts msg
    else
      print msg
    end
  end

end

Screenshot.new.init
