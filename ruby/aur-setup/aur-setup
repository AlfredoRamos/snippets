#!/usr/bin/env ruby
# encoding: UTF-8
$stdout.sync = $stderr.sync = true

require 'parseconfig'
require 'logger'

class AurSetUp
  VERSION = '0.4.0'

  def initialize
    # Setup logger
    @logger = Logger.new($stdout)
    @logger.datetime_format = '%F %T %:z'
    @logger.formatter = proc do |severity, datetime, progname, msg|
      "[#{severity}] #{datetime} | #{msg}\n"
    end

    # Configuration file
    file = File.absolute_path(File.join(Dir.home, '.config', 'aur-setup.conf'))

    # Create an empty configuration file if it doesn't exist
    unless File.exist?(file)
      @logger.warn('Configuration file does not exist')

      File.open(file, 'w') do |file|
        file.puts '[aur]'
        file.puts 'root_path='
        file.puts 'hooks_path='
        file.puts
        file.puts '[git]'
        file.puts 'name='
        file.puts 'email='
      end

      @logger.info('Config file created at %s' % file)
    end

    # Load settings from file
    begin
      @config = ParseConfig.new(file)
    rescue => error
      @logger.fatal('Could not load settings from file')
      abort
    end

    # Check for errors
    case
    when (@config['aur']['root_path'].empty? or @config['aur']['hooks_path'].empty?)
      @logger.fatal('You need to set the AUR root and hooks path')
      abort
    when (@config['git']['name'].empty? or @config['git']['email'].empty?)
      @logger.fatal('You need to set the git user name and email')
      abort
    end

  end

  def run
    args = parse_arguments

    if args.key?('version')
      # Show version
      version
    elsif args.key?('help')
      # Show help
      help
    else
      # Add git configuration and hooks
      setup_aur_packages
    end
  end

  def parse_arguments
    return ARGV.join(' ').scan(/--?([^=\s]+)(?:=(\S+))?/).to_h
  end

  def copyright
    puts '%1$s %2$s - A simple AUR setup helper' % [
      File.basename(__FILE__),
      VERSION
    ]
    puts
    puts 'Copyright (C) 2015 Alfredo Ramos'
    puts
    puts 'This is free software; see the source for copying conditions. There is NO'
    puts 'WARRANTY; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.'
    puts 'See the GNU General Public License version 3 for more details.'
  end

  def git_repositories
    repositories = Dir.entries(File.expand_path(@config['aur']['root_path'])) - ['.', '..']

    repositories.map! do |repository|
      # Get absolute path
      repository = File.absolute_path(File.join(
        File.expand_path(@config['aur']['root_path']),
        repository
      ))
    end

    repositories
  end

  def git_hooks
    hooks = Dir.entries(File.expand_path(@config['aur']['hooks_path'])) - ['.', '..']

    # Do not include files that are not hooks
    hooks.delete_if do |hook|
      not hook.include?('.hook') or not File.file?(File.join(
        File.expand_path(@config['aur']['hooks_path']),
        hook
      ))
    end

    hooks
  end

  def version
    puts '%1$s %2$s' % [
      File.basename(__FILE__),
      VERSION
    ]
    exit
  end

  def help
    copyright
    puts
    puts 'Usage: %s [<options>]' % File.basename(__FILE__)
    puts
    puts 'Options:'
    puts '  --version'
    puts '    Display the version of this script.'
    puts
    puts '  --help'
    puts '    Display this information.'
  end

  def setup_aur_packages
    git_repositories.each do |package|
      setup_git_config(package)
      setup_git_hooks(package)
    end
  end

  def setup_git_config(package)
    if Dir.exist?(package)
      # Change to package directory
      Dir.chdir(package)

      format = 'git config --local --replace-all user.%1$s "%2$s"'

      # Git config
      system(format % ['name', @config['git']['name']])
      system(format % ['email', @config['git']['email']])

      @logger.info('%s git configuration [OK]' % File.basename(package))
    end

    # Return to the AUR root path
    Dir.chdir(File.expand_path(@config['aur']['root_path']))
  end

  def setup_git_hooks(package)
    git_hooks.each do |hook|
      file = File.join(File.expand_path(@config['aur']['hooks_path']), hook)
      target = File.join(package, '.git', 'hooks', hook).chomp('.hook')

      # Create symbolic link
      if File.exist?(file) and not File.symlink?(target)
        File.symlink(file, target)
      end
    end

    # Get installed hooks
    hooks = Dir.entries(File.join(package, '.git', 'hooks')) - ['.', '..']

    # Do not include sample hooks
    hooks.delete_if do |hook|
      hook.include?('.sample')
    end

    @logger.info('%1$s git hooks [%2$s]' % [
      File.basename(package),
      (hooks.empty? ? 'FAIL' : 'OK')
    ])
  end

end

# Run application
AurSetUp.new.run
