#!/usr/bin/env ruby
# encoding: UTF-8
$stdout.sync = $stderr.sync = true

require 'parseconfig'
require 'logger'

class AurSetUp
  VERSION = '0.3.2'

  def initialize
    setup_logger
    load_settings
  end

  def run
    args = parse_arguments

    if args.key?('version')
      # Show version
      version
    elsif args.key?('help')
      # Show help
      help
    else
      setup_git_config
      setup_git_hooks
    end
  end

  def version
    puts '%1$s %2$s' % [
      File.basename(__FILE__),
      VERSION
    ]
    exit
  end

  def help
    copyright
    puts
    puts 'Usage: %s [<options>]' % File.basename(__FILE__)
    puts
    puts 'Options:'
    puts '  --version'
    puts '    Display the version of this script.'
    puts
    puts '  --help'
    puts '    Display this information.'
  end

  def setup_git_config
    begin
      if @config['git']['name'].empty? or @config['git']['email'].empty?
        raise 'You need to set the git user name and email'
      end

      puts ':: Setting up repositories'

      git_repositories.each do |repo|
        if Dir.exist?(repo)
          Dir.chdir(repo)

          # Git config
          system(
            'git config --local --replace-all user.name "%s"' %
            @config['git']['name']
          )
          system(
            'git config --local --replace-all user.email "%s"' %
            @config['git']['email']
          )
        end

        puts ' -> %s... done' % File.basename(repo)
      end

      Dir.chdir(File.expand_path(@config['aur']['root']))
    rescue => error
      @logger.error(error.message)
    end
  end

  def setup_git_hooks
    begin
      if @config['aur']['root'].empty? or @config['aur']['hooks'].empty?
        raise 'You need to set the AUR root and hooks root path'
      end

      puts ':: Setting up git hooks'

      git_repositories.each do |repo|
        git_hooks.each do |hook|
          file = File.join(File.expand_path(@config['aur']['hooks']), hook)
          target = File.join(repo, '.git', 'hooks', hook).chomp('.hook')

          # Create symbolic link
          if File.exist?(file) and !File.symlink?(target)
            File.symlink(file, target)
          end
        end

        # Get installed hooks
        hooks = Dir.entries(File.join(repo, '.git', 'hooks')) - ['.', '..']

        # Delete sample hooks
        hooks.delete_if do |hook|
          hook.include?('.sample')
        end

        # Show message
        puts ' -> %1$s... %2$s' % [
          File.basename(repo),
          (!hooks.empty? ? 'done' : 'fail')
        ]
      end
    rescue => error
      @logger.error(error.message)
    end
  end

  private
  def setup_logger
    @logger = Logger.new($stdout)
    @logger.datetime_format = '%F %T %:z'
    @logger.formatter = proc do |severity, datetime, progname, msg|
      "[#{severity}] #{datetime} | #{msg}\n"
    end
  end

  def load_settings
    begin
      file = File.absolute_path(File.join(Dir.home, '.config', 'aur-setup.conf'))

      # Create config file if not exist
      if !File.exist?(file)
        @logger.warn('Config file does not exist')

        File.open(file, 'w') do |file|
          file.puts '[aur]'
          file.puts 'root=""'
          file.puts 'hooks=""'
          file.puts
          file.puts '[git]'
          file.puts 'name=""'
          file.puts 'email=""'
        end

        @logger.info('Config file created at %s' % file)
      end

      # Parse config file
      @config = ParseConfig.new(file)
    rescue => error
      @logger.error(error.message)
    end
  end

  def parse_arguments
    return ARGV.join(' ').scan(/--?([^=\s]+)(?:=(\S+))?/).to_h
  end

  def copyright
    puts '%1$s %2$s - A simple AUR setup helper' % [
      File.basename(__FILE__),
      VERSION
    ]
    puts
    puts 'Copyright (C) 2015 Alfredo Ramos'
    puts
    puts 'This is free software; see the source for copying conditions. There is NO'
    puts 'WARRANTY; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.'
    puts 'See the GNU General Public License version 3 for more details.'
  end

  def git_repositories
    begin
      if @config['aur']['root'].empty?
        raise 'You need to set the AUR root path'
      end

      repos = Dir.entries(File.expand_path(@config['aur']['root'])) - ['.', '..']

      if repos.empty?
        raise 'No repositories found'
      end

      repos.map! do |repo|
        # Get absolute path
        repo = File.absolute_path(File.join(
          File.expand_path(@config['aur']['root']),
          repo
        ))
      end
    rescue => error
      @logger.error(error.message)
    end

    repos
  end

  def git_hooks
    begin
      if @config['aur']['hooks'].empty?
        raise 'You need to set the git hooks root path'
      end

      hooks = Dir.entries(File.expand_path(@config['aur']['hooks'])) - ['.', '..']

      # Do not include files that are not hooks
      hooks.delete_if do |hook|
        !hook.include?('.hook') or !File.file?(File.join(
          File.expand_path(@config['aur']['hooks']),
          hook
        ))
      end

      if hooks.empty?
        raise 'No hooks found'
      end
    rescue => error
      @logger.error(error.message)
    end

    hooks
  end

end

# Run application
AurSetUp.new.run
